//   playing_cards.c
//   David Gregg
//   December 2020

#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include "playing_cards.h"



// pack the playing card structures into bytes of memory
unsigned char * pack_playing_cards(struct playing_card * cards,
				   int number_of_cards) {
    int number_of_bits = number_of_cards * 8;
    unsigned char * packed = malloc(number_of_cards * sizeof(unsigned char));
    unsigned char pack = 0;
    int  pack_i = 0;
    for(int i = 0; i < number_of_bits; i++)
    {
        int bit_i = i % 8;
        int card_bit_i = i % 6;
        int card_i = i/6;
        unsigned char temp_bit;
        unsigned char mask;
        if(card_bit_i < 2)
        {
            mask = 1 << (1 - card_bit_i);
            temp_bit = cards[card_i].suit & mask;
        }
        else //if(card_bit_i >= 2)
        {
            mask = 1 << (5 - card_bit_i);
            temp_bit = cards[card_i].value & mask;
        }
        if(bit_i == 0 && i != 0)
        {
            pack = 0;
            pack_i++;
        }
        pack = pack | (temp_bit << (7 - b) ;
        packed[pack_i] = pack;
    }
	return packed;
}




// unpack bytes of memory containing card data into playing card structures
struct playing_card * unpack_playing_cards(unsigned char * packed_cards,
					   int number_of_cards) {

}


